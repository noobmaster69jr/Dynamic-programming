/* given N reduce it to 1 using following steps if divisible by 2 -> N/2, if divisible by 3 -> N/3, else N-1. find minimum no of steps required */
import java.util.Arrays;

class ReduceToOne{
    
    static int dp(int n, int memo[]){
        
        if(n == 1) return 0;
        if(memo[n] != -1) {
            return memo[n];
        }
        int ans = Integer.MAX_VALUE;
        
        if(n%2 == 0){
            ans = Math.min(ans, dp(n/2, memo));    
        }
        if(n%3 == 0){
            ans = Math.min(ans, dp(n/3, memo));
        }
        ans = Math.min(ans, dp(n-1, memo));
        ans += 1;
        
        return memo[n] = ans;
        
    }
    public static void main(String [] args){
        int n = 10;
        int memo[] = new int[n+1];
        Arrays.fill(memo, -1);
        int result = dp(n, memo);
        
        System.out.print(result);
    }
}
